{"version":3,"sources":["context/AnimesContext.jsx","components/Header/styles.jsx","components/Input-Search/styles.jsx","components/Input-Search/index.jsx","components/Header/index.jsx","components/Card-Category/styles.jsx","components/Card-Category/index.jsx","pages/Home/index.jsx","services/settings.js","services/getTopAnimes.js","hooks/useTopAnimes.jsx","components/RotateSpinner/index.jsx","components/AnimeCard/styles.jsx","components/AnimeCard/index.jsx","components/List-Of-Animes/styles.jsx","components/List-Of-Animes/index.jsx","pages/TopAnimes/index.jsx","services/getSeasonAnimes.js","hooks/useSeasonAnimes.jsx","pages/SeasonAnime/index.jsx","services/getSearchedAnimes.js","hooks/useSearchedAnimes.jsx","pages/SearchResults/index.jsx","components/AnimeDetails/styles.jsx","components/AnimeDetails/index.jsx","components/Button-Back/index.jsx","services/getSingleAnime.js","hooks/useSingleAnime.jsx","pages/Details/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","AnimesContextProvider","children","useState","animes","setAnimes","topAnimes","setTopAnimes","seasonAnimes","setSeasonAnimes","checkedCategory","setCheckedCategory","Provider","value","HeaderStyled","styled","div","InputSearchStyled","InputSearch","keyword","setKeyword","history","useHistory","onSubmit","e","preventDefault","push","placeholder","onChange","target","type","Header","className","to","CardCategoryStyled","CardCategory","title","description","link","onClick","alt","src","Home","API_URL","api_URL","getTopAnimes","fetch","then","response","json","data","top","console","log","map","rank","image_url","mal_id","score","useTopAnimes","loading","setLoading","useContext","AnimesContext","useEffect","length","rotate","keyframes","RotateSpinner","size","color","sizeUnit","radius","ballSize","Wrapper","countBalls","angle","balls","offset","i","y","Math","sin","PI","x","cos","Ball","key","toString","index","getBalls","props","defaultProps","AnimeCardStyled","Anime","id","episodes","members","handleClick","undefined","ListOfAnimesStyled","ListOfAnimes","seccion","TopAnimes","getSeasonAnimes","apiURL","anime","seasonAnime","synopsis","useSeasonAnimes","SeasonAnime","getSearchedAnimes","limit","page","newKeyword","replace","results","filter","toLowerCase","includes","sort","prev","next","useSearchedAnimes","SearchResults","match","params","AnimeDetailsStyled","AnimeDetails","trailer_url","scored_by","genres","opening_themes","ending_themes","width","height","frameborder","allow","allowfullscreen","item","name","ButtonBack","goBack","getSingleAnime","useSingleAnime","setAnime","PageDetail","App","exact","path","component","TopAnime","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8311546b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst Context = React.createContext({});\n\nexport function AnimesContextProvider({ children }) {\n  const [animes, setAnimes] = useState([]);\n  const [topAnimes, setTopAnimes] = useState([]);\n  const [seasonAnimes, setSeasonAnimes] = useState([]);\n\n  const [checkedCategory, setCheckedCategory] = useState(\"\");\n\n  return (\n    <Context.Provider\n      value={{\n        animes,\n        setAnimes,\n        topAnimes,\n        setTopAnimes,\n        checkedCategory,\n        setCheckedCategory,\n        seasonAnimes,\n        setSeasonAnimes,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  );\n}\n\nexport default Context;\n","import styled from \"styled-components\";\n\nexport const HeaderStyled = styled.div`\n  .header {\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    width: 100%;\n    height: 45px;\n    background: var(--white);\n    margin-bottom: 10px;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const InputSearchStyled = styled.div`\n  input {\n    width: 100%;\n  }\n`;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { InputSearchStyled } from \"./styles\";\n\nfunction InputSearch() {\n  const [keyword, setKeyword] = useState(\"\");\n  const history = useHistory();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    history.push(`/search/${keyword}`);\n  };\n\n  const handleChange = (e) => {\n    setKeyword(e.target.value);\n  };\n  return (\n    <InputSearchStyled>\n      <form onSubmit={handleSubmit}>\n        <input\n          placeholder=\"Search a anime here...\"\n          onChange={handleChange}\n          type=\"text\"\n          value={keyword}\n        />\n      </form>\n    </InputSearchStyled>\n  );\n}\n\nexport default InputSearch;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { HeaderStyled } from \"./styles\";\nimport InputSearch from \"components/Input-Search\";\n\nfunction Header() {\n  return (\n    <HeaderStyled>\n      <header className=\"header\">\n        <Link to=\"/\">Anime Finder</Link>\n        <InputSearch />\n      </header>\n    </HeaderStyled>\n  );\n}\n\nexport default Header;\n","import styled from \"styled-components\";\n\nexport const CardCategoryStyled = styled.div`\n  background: var(--white);\n  display: flex;\n  width: 90%;\n  margin: auto;\n  margin-bottom: 10px;\n  align-items: center;\n\n  .image {\n    width: 49%;\n    img {\n      width: 100%;\n    }\n  }\n  .details {\n    width: 49%;\n  }\n`;\n","import React from \"react\";\nimport { CardCategoryStyled } from \"./styles\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction CardCategory({ title, description, link }) {\n  const history = useHistory();\n  function handleClick() {\n    history.push(`${link}`);\n  }\n  return (\n    <CardCategoryStyled onClick={handleClick}>\n      <div className=\"image\">\n        <img\n          alt=\"anime category\"\n          src=\"https://finde.latercera.com/wp-content/uploads/2020/06/Amor-de-gata-2-700x450.jpg\"\n        />\n      </div>\n      <div className=\"details\">\n        <h2>{title}</h2>\n        <p>{description}</p>\n      </div>\n    </CardCategoryStyled>\n  );\n}\n\nexport default CardCategory;\n","import React from \"react\";\n\n// import useAnimes from \"hooks/useAnimes\";\nimport Header from \"components/Header\";\nimport CardCategory from \"components/Card-Category\";\n\n// import ListOfAnimes from \"components/ListOfAnimes\";\n\nfunction Home() {\n  // const { loading, animes } = useAnimes();\n  // const { animes } = useAnimes();\n\n  return (\n    <div>\n      <Header />\n      <section>\n        <CardCategory\n          title=\"Top Anime\"\n          description=\"Animes best value for the community (Alpha)\"\n          link=\"/top/anime\"\n        />\n        <CardCategory\n          title=\"Season Anime\"\n          description=\"Animes this season (Beta)\"\n          link=\"/season/anime\"\n        />\n        <CardCategory\n          title=\"Page in Blanck\"\n          description=\"Nothingt. Not enter\"\n        />\n        <CardCategory\n          title=\"Page in Blanck\"\n          description=\"Nothingt. Not enter\"\n        />\n      </section>\n      {/* <Seasons /> */}\n      {/* <ListOfAnimes animes={animes} /> */}\n    </div>\n  );\n}\n\nexport default Home;\n","export const API_URL = \"https://api.jikan.moe/v3\";\n","import { API_URL } from \"./settings\";\nconst api_URL = `${API_URL}/top/anime`;\n\nfunction getTopAnimes() {\n  return fetch(api_URL)\n    .then((response) => response.json())\n    .then((data) => {\n      const { top } = data;\n      console.log(top);\n      const animes = top.map(({ title, rank, image_url, mal_id, score }) => {\n        return { title, rank, image_url, mal_id, score };\n      });\n      return animes;\n    });\n}\n\nexport default getTopAnimes;\n","import { useContext, useEffect, useState } from \"react\";\nimport getTopAnimes from \"services/getTopAnimes\";\nimport AnimesContext from \"context/AnimesContext\";\n\nfunction useTopAnimes() {\n  const [loading, setLoading] = useState(false);\n  //Ahora actualizamos el estado global\n  const { topAnimes, setTopAnimes, setCheckedCategory } = useContext(\n    AnimesContext\n  );\n  console.log(topAnimes);\n\n  useEffect(() => {\n    setLoading(true);\n    if (topAnimes.length <= 0) {\n      console.log(\"true\");\n      getTopAnimes().then((topAnimes) => {\n        setTopAnimes(topAnimes);\n        setCheckedCategory(\"top-anime\");\n        setLoading(false);\n      });\n    }\n    //Whit this prevent do a fetch request if the context have information\n    else {\n      setTopAnimes(topAnimes);\n      setCheckedCategory(\"top-anime\");\n      setLoading(false);\n    }\n  }, [topAnimes, setTopAnimes, setCheckedCategory]);\n  return { loading, topAnimes };\n}\n\nexport default useTopAnimes;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled, { keyframes } from \"styled-components\";\n\nconst rotate = keyframes`\n    0% {\n        transform: rotate(0deg);\n    }\n    100% { \n        transform: rotate(1440deg); \n        opacity: 0.05;\n    }\n`;\n\nconst getBalls = ({\n  countBalls,\n  radius,\n  angle,\n  color,\n  size,\n  ballSize,\n  sizeUnit,\n}) => {\n  const balls = [];\n  const offset = ballSize / 2;\n  for (let i = 0; i < countBalls; i++) {\n    const y = Math.sin(angle * i * (Math.PI / 180)) * radius - offset;\n    const x = Math.cos(angle * i * (Math.PI / 180)) * radius - offset;\n    balls.push(\n      <Ball\n        color={color}\n        ballSize={ballSize}\n        size={size}\n        x={y}\n        y={x}\n        key={i.toString()}\n        index={i}\n        sizeUnit={sizeUnit}\n      />\n    );\n  }\n  return balls;\n};\n\nexport const RotateSpinner = ({ size, color, loading, sizeUnit }) => {\n  const radius = size / 2;\n  const countBalls = 8;\n  const ballSize = size / 5;\n  const angle = 360 / countBalls;\n  return (\n    loading && (\n      <Wrapper size={size} sizeUnit={sizeUnit}>\n        {getBalls({\n          countBalls,\n          radius,\n          angle,\n          color,\n          size,\n          ballSize,\n          sizeUnit,\n        })}\n      </Wrapper>\n    )\n  );\n};\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: ${(props) => `${props.size}${props.sizeUnit}`};\n  height: ${(props) => `${props.size}${props.sizeUnit}`};\n`;\n\nconst Ball = styled.div`\n  position: absolute;\n  left: 50%;\n  top: 0%;\n  width: ${(props) => `${props.ballSize}${props.sizeUnit}`};\n  height: ${(props) => `${props.ballSize}${props.sizeUnit}`};\n  border-radius: 50%;\n  background-color: ${(props) => props.color};\n  transform: translateX(-50%) translateY(100%);\n  transform-origin: 0 250% 0;\n  animation: ${rotate} 4s both infinite;\n  animation-timing-function: cubic-bezier(\n    0.5,\n    ${(props) => props.index * 0.3},\n    0.9,\n    0.9\n  );\n`;\n\nRotateSpinner.defaultProps = {\n  loading: true,\n  size: 45,\n  color: \"#00ff89\",\n  sizeUnit: \"px\",\n};\n\nRotateSpinner.propTypes = {\n  loading: PropTypes.bool,\n  size: PropTypes.number,\n  color: PropTypes.string,\n  sizeUnit: PropTypes.string,\n};\n\n/* Documentation https://reactjsexample.com/a-collection-of-loading-spinners-with-react-js-2/ */\n","import styled from \"styled-components\";\n\nexport const AnimeCardStyled = styled.div`\n  /* border: 1px solid red; */\n  img {\n    width: 100%;\n    height: 209px;\n  }\n  .information {\n    h2 {\n      font-size: 15px;\n    }\n  }\n`;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { AnimeCardStyled } from \"./styles\";\n\nfunction Anime({ id, image_url, title, type, score, rank, episodes, members }) {\n  const history = useHistory();\n  function handleClick() {\n    history.push(`/anime/${id}`);\n  }\n  if (type === undefined) {\n    return (\n      <AnimeCardStyled onClick={handleClick}>\n        <img alt={title} src={image_url} />\n        <h2>{title}</h2>\n        <p>Rank: {rank}</p>\n        <p>Score: {score}</p>\n      </AnimeCardStyled>\n    );\n  } else {\n    return (\n      <AnimeCardStyled onClick={handleClick}>\n        <img alt={title} src={image_url} />\n        <div className=\"information\">\n          <h2>{title}</h2>\n          <p>\n            {type}({episodes})\n          </p>\n          <p>Score: {score}</p>\n          <p>{members}</p>\n        </div>\n      </AnimeCardStyled>\n    );\n  }\n}\n\nexport default Anime;\n","import styled from \"styled-components\";\n\nexport const ListOfAnimesStyled = styled.div`\n  display: grid;\n  grid-template-columns: 148px 148px;\n  column-gap: 15px;\n`;\n","import React from \"react\";\nimport Anime from \"../AnimeCard\";\nimport { ListOfAnimesStyled } from \"./styles\";\n\nfunction ListOfAnimes({ animes, seccion }) {\n  console.log(animes);\n  if (seccion === \"top-anime\") {\n    return (\n      <div>\n        {animes.map(\n          ({ mal_id, image_url, title, score, rank, type, episodes }) => {\n            //Extraemos los datos que nos llegan :b\n            return (\n              <Anime\n                key={mal_id}\n                id={mal_id}\n                image_url={image_url}\n                title={title}\n                type={type}\n                episodes={episodes === null ? type : episodes}\n                score={score}\n                rank={rank}\n              />\n            );\n          }\n        )}\n      </div>\n    );\n  } else {\n    return (\n      <ListOfAnimesStyled>\n        {animes.map(({ mal_id, image_url, title, type, score, episodes }) => {\n          //Extraemos los datos que nos llegan :b\n          return (\n            <Anime\n              key={mal_id}\n              id={mal_id}\n              image_url={image_url}\n              title={title}\n              type={type}\n              episodes={episodes}\n              score={score}\n            />\n          );\n        })}\n      </ListOfAnimesStyled>\n    );\n  }\n}\n\nexport default ListOfAnimes;\n","import React from \"react\";\nimport useTopAnimes from \"hooks/useTopAnimes\";\nimport { RotateSpinner } from \"components/RotateSpinner\";\n\nimport Header from \"components/Header\";\n\nimport ListOfAnimes from \"components/List-Of-Animes\";\n\nfunction TopAnimes() {\n  const { loading, topAnimes } = useTopAnimes();\n  if (loading) {\n    return <RotateSpinner loading={loading} />;\n  }\n  return (\n    <div>\n      <Header />\n\n      <ListOfAnimes animes={topAnimes} seccion=\"top-anime\" />\n    </div>\n  );\n}\n\nexport default TopAnimes;\n","import { API_URL } from \"./settings\";\n\nfunction getSeasonAnimes() {\n  const apiURL = `${API_URL}/season`;\n\n  return fetch(apiURL)\n    .then((response) => response.json())\n    .then((data) => {\n      const { anime } = data;\n      console.log(data);\n      const seasonAnimes = anime.map((seasonAnime) => {\n        const {\n          image_url,\n          mal_id,\n          title,\n          type,\n          synopsis,\n          score,\n          episodes,\n        } = seasonAnime;\n        return { image_url, mal_id, title, type, synopsis, score, episodes };\n      });\n      // .sort(function (prev, next) {\n      //   if (prev.title > next.title) {\n      //     return 1;\n      //   }\n      //   if (prev.title < next.title) {\n      //     return -1;\n      //   }\n      //   return 0;\n      // });\n      // console.log(\n      //   seasonAnimes.sort(function (prev, next) {\n      //     if (prev.title > next.title) {\n      //       return 1;\n      //     }\n      //     if (prev.title < next.title) {\n      //       return -1;\n      //     }\n      //     return 0;\n      //   })\n      // );\n      return seasonAnimes;\n    });\n}\n\nexport default getSeasonAnimes;\n","import { useContext, useEffect, useState } from \"react\";\nimport getSeasonAnimes from \"services/getSeasonAnimes\";\nimport AnimesContext from \"context/AnimesContext\";\n\nfunction useSeasonAnimes() {\n  const { seasonAnimes, setSeasonAnimes, setCheckedCategory } = useContext(\n    AnimesContext\n  );\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    if (seasonAnimes <= 0) {\n      getSeasonAnimes().then((seasonAnimes) => {\n        setSeasonAnimes(seasonAnimes);\n        setCheckedCategory(\"season-anime\");\n        setLoading(false);\n      });\n    }\n    //Whit this prevent do a fetch request if the context have information\n    else {\n      setSeasonAnimes(seasonAnimes);\n      setCheckedCategory(\"season-anime\");\n      setLoading(false);\n    }\n  }, [seasonAnimes, setCheckedCategory, setSeasonAnimes]);\n  return { loading, seasonAnimes, setCheckedCategory };\n}\n\nexport default useSeasonAnimes;\n","import React from \"react\";\nimport useSeasonAnimes from \"hooks/useSeasonAnimes\";\nimport Header from \"components/Header\";\nimport ListOfAnimes from \"components/List-Of-Animes\";\nimport { RotateSpinner } from \"components/RotateSpinner\";\n\nfunction SeasonAnime() {\n  const { loading, seasonAnimes } = useSeasonAnimes();\n  if (loading) {\n    return <RotateSpinner loading={loading} />;\n  }\n  return (\n    <div>\n      <Header />\n\n      <ListOfAnimes animes={seasonAnimes} seccion=\"season-anime\" />\n    </div>\n  );\n}\n\nexport default SeasonAnime;\n","import { API_URL } from \"./settings\";\n\nfunction getSearchedAnimes({\n  type = \"anime\",\n  keyword,\n  limit = 25,\n  page = 1,\n} = {}) {\n  const apiURL = `${API_URL}/search/${type}?q=${keyword}&limit=${limit}&page=${page}`;\n\n  const newKeyword = keyword.replace(/[ -:]/g, \"\");\n\n  return fetch(apiURL)\n    .then((response) => response.json())\n    .then((data) => {\n      const { results } = data; //Esta genial destructurar la data\n      console.log(results);\n      const animes = results\n        .filter((anime) => {\n          var newTitle = anime.title.replace(/[ -:]/g, \"\");\n          return newTitle.toLowerCase().includes(newKeyword.toLowerCase());\n        })\n        .map((anime) => {\n          const { mal_id, image_url, title, type, score } = anime;\n          return { mal_id, image_url, title, type, score };\n        })\n        .sort((prev, next) => {\n          if (prev.title > next.title) {\n            return 1;\n          }\n          if (prev.title < next.title) {\n            return -1;\n          }\n          return 0;\n        });\n\n      return animes;\n    });\n}\n\nexport default getSearchedAnimes;\n","import { useContext, useEffect, useState } from \"react\";\nimport getSearchedAnimes from \"services/getSearchedAnimes\";\nimport AnimesContext from \"context/AnimesContext\";\n\nfunction useSearchedAnimes({ keyword } = \"naruto\") {\n  const [loading, setLoading] = useState(false);\n  //Ahora actualizamos el estado global\n  const { animes, setAnimes, setCheckedCategory } = useContext(AnimesContext);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getSearchedAnimes({ keyword }).then((animes) => {\n      setAnimes(animes);\n      setCheckedCategory(\"search\");\n      setLoading(false);\n    });\n  }, [keyword, setAnimes, setCheckedCategory]);\n\n  return { loading, animes };\n}\n\nexport default useSearchedAnimes;\n","import React from \"react\";\nimport { RotateSpinner } from \"components/RotateSpinner\";\nimport ListOfAnimes from \"components/List-Of-Animes\";\nimport useSearchedAnimes from \"hooks/useSearchedAnimes\";\nimport Header from \"components/Header\";\n\nfunction SearchResults({ match }) {\n  const { params } = match;\n  const { keyword } = params;\n  const { loading, animes } = useSearchedAnimes({ keyword });\n\n  if (loading) {\n    return <RotateSpinner loading={loading} />;\n  }\n\n  return (\n    <div>\n      <Header />\n      <ListOfAnimes animes={animes} />\n    </div>\n  );\n}\n\nexport default SearchResults;\n","import styled from \"styled-components\";\n\nexport const AnimeDetailsStyled = styled.div`\n  background: var(--background);\n  .iframe {\n    width: 100%;\n  }\n  .synopsis {\n    background: var(--white);\n  }\n  .genres {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, 114px);\n    row-gap: 10px;\n    justify-items: center;\n    span {\n      padding: 5px;\n      width: 91px;\n      text-align: center;\n      background: var(--white);\n      border-radius: 5px;\n      box-shadow: 0 0 7px 2px rgba(0, 0, 0, 0.03);\n    }\n  }\n`;\n","import React from \"react\";\nimport { AnimeDetailsStyled } from \"./styles\";\n\nfunction AnimeDetails({\n  trailer_url,\n  title,\n  score,\n  scored_by,\n  type,\n  synopsis,\n  genres = [],\n  opening_themes = [],\n  ending_themes = [],\n}) {\n  return (\n    <AnimeDetailsStyled>\n      <iframe\n        title={title}\n        className=\"iframe\"\n        width=\"560\"\n        height=\"315\"\n        src={trailer_url}\n        frameborder=\"0\"\n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n        allowfullscreen\n      ></iframe>\n      <h2>{title}</h2>\n      <p>\n        Score: {score}. Scored by: {scored_by}\n      </p>\n      <p>Type: {type}</p>\n      <h3>Description: </h3>\n      <p className=\"synopsis\">{synopsis}</p>\n      <h3>Genres: </h3>\n      <p className=\"genres\">\n        {genres.map((item) => (\n          <span key={item.name}>{item.name}</span>\n        ))}\n      </p>\n      <h3>Openings</h3>\n      <ul>\n        {opening_themes.map((item) => (\n          <li className=\"themes\" key={item}>\n            {item}\n          </li>\n        ))}\n      </ul>\n      <h3>Endings</h3>\n      <ul>\n        {ending_themes.map((item) => (\n          <li className=\"themes\" key={item}>\n            {item}\n          </li>\n        ))}\n      </ul>\n    </AnimeDetailsStyled>\n  );\n}\n\nexport default AnimeDetails;\n","import React from \"react\";\n\nfunction ButtonBack({ history }) {\n  function handleClick() {\n    history.goBack();\n  }\n  return (\n    <div>\n      <button className=\"back\" onClick={handleClick}>\n        Back\n      </button>\n    </div>\n  );\n}\n\nexport default ButtonBack;\n","import { API_URL } from \"./settings\";\nfunction getSingleAnime({ type = \"anime\", mal_id }) {\n  const api_URL = `${API_URL}/${type}/${mal_id}`;\n  return fetch(api_URL)\n    .then((response) => response.json())\n    .then((data) => {\n      const anime = data;\n      return anime;\n    });\n}\n\nexport default getSingleAnime;\n","import { useState, useEffect } from \"react\";\nimport getSingleAnime from \"services/getSingleAnime\";\n\nfunction useSingleAnime({ mal_id }) {\n  const [anime, setAnime] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    setLoading(true);\n\n    getSingleAnime({ mal_id }).then((anime) => {\n      setAnime(anime);\n      setLoading(false);\n    });\n  }, [mal_id]);\n  return { anime, loading };\n}\n\nexport default useSingleAnime;\n","import React from \"react\";\n// import AnimesContext from \"context/AnimesContext\";\nimport { RotateSpinner } from \"components/RotateSpinner\";\nimport AnimeDetails from \"components/AnimeDetails\";\nimport ButtonBack from \"components/Button-Back\";\nimport useSingleAnime from \"hooks/useSingleAnime\";\n\nfunction PageDetail({ match, history }) {\n  const mal_id = match.params.id;\n  const { anime, loading } = useSingleAnime({ mal_id });\n  if (loading) {\n    return <RotateSpinner loading={loading} />;\n  }\n  return (\n    <div>\n      <ButtonBack history={history} />\n      <AnimeDetails {...anime} />\n    </div>\n  );\n}\n\nexport default PageDetail;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n//CONTEXT\nimport { AnimesContextProvider } from \"./context/AnimesContext\";\n\n//PAGES\nimport Home from \"./pages/Home\";\nimport TopAnime from \"pages/TopAnimes\";\nimport SeasonAnime from \"pages/SeasonAnime\";\nimport SearchResults from \"./pages/SearchResults\";\nimport PageDetail from \"./pages/Details\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <AnimesContextProvider>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/top/anime\" component={TopAnime} />\n          <Route exact path=\"/season/anime\" component={SeasonAnime} />\n          <Route path=\"/search/:keyword\" component={SearchResults} />\n          <Route path=\"/anime/:id\" component={PageDetail} />\n        </AnimesContextProvider>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}